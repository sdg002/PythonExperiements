trigger:
  branches:
    include:
      - main
      - master

  paths:
    include:
      - "docker-windows/base-python-image/*"

pool:
  vmImage: "windows-2019"


variables:
  workingDirectory: "$(System.DefaultWorkingDirectory)/docker-windows/base-python-image"
  imagetag: "$(BuildName)"
  containerRegistry: "mywin001vm.azurecr.io"  # Replace with your registry URL
  repositoryName: "python3.9-baseimage"
  dockerRegistryServiceConnection: "mywin001vmAzureAcr"  # Replace with your service connection name
  MajorVersion: '1'
  MinorVersion: $[counter(variables['MajorVersion'], 1)]
  ReleaseBuildName: $(MajorVersion).$(MinorVersion).0
  PreReleaseBuildName: $(MajorVersion).$(MinorVersion).$(Build.BuildId)-beta
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    BuildName: "${{ variables.ReleaseBuildName }}"
  ${{ else }}:
    BuildName: "${{ variables.PreReleaseBuildName }}"

name: "${{ variables.BuildName }}"

stages:
  - stage: Build
    displayName: "Build Stage"
    jobs:
      - job: BuildJob
        displayName: "Build and Test"
        steps:
          - task: PowerShell@2
            displayName: "Dump variables"
            inputs:
              targetType: "inline"
              script: |
                Write-Host "PowerShell task execution started"
                dir env:
              workingDirectory: "$(workingDirectory)"

          - task: Docker@2
            displayName: "Build and push Docker image"
            inputs:
              command: "buildAndPush"
              dockerfile: "$(workingDirectory)/Dockerfile"
              buildContext: "$(workingDirectory)"
              repository: "$(repositoryName)"
              tags: | 
                $(imagetag)
                latest              
              containerRegistry: "$(dockerRegistryServiceConnection)"
              #repository: "$(containerRegistry)/$(repositoryName)"

          - task: Docker@2
            displayName: "List all Docker images"
            inputs:
              command: "images"

          - script: |
              docker run --rm $(containerRegistry)/$(repositoryName):$(imagetag)  python --version
            displayName: "Check Python version in Docker"

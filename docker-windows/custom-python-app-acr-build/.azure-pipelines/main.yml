trigger:
  branches:
    include:
      - main
      - master

  paths:
    include:
      - "docker-windows/custom-python-app-acr-build/*"
    exclude:
      - "docker-windows/docs/*"
      - "docker-windows/docs/readme.md"

pool:
  vmImage: "windows-2019"


variables:
  workingDirectory: "$(System.DefaultWorkingDirectory)/docker-windows/custom-python-app-acr-build"
  imagetag: "$(BuildName)"
  containerRegistry: "mywin001vm.azurecr.io"  # Replace with your registry URL
  repositoryName: "python3.9-customapp-acr"
  dockerRegistryServiceConnection: "mywin001vmAzureAcr"  # Replace with your service connection name
  azureSubscription: "azure pay as you go demo (sep 21)"  # Replace with your Azure service connection name
  MajorVersion: '1'
  MinorVersion: $[counter(variables['MajorVersion'], 1)]
  ReleaseBuildName: $(MajorVersion).$(MinorVersion).0
  PreReleaseBuildName: $(MajorVersion).$(MinorVersion).$(Build.BuildId)-beta
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    BuildName: "${{ variables.ReleaseBuildName }}"
    latestTag: "latest"
  ${{ else }}:
    BuildName: "${{ variables.PreReleaseBuildName }}"
    latestTag: "beta-latest"
  
name: "${{ variables.BuildName }}"

stages:
  - stage: Build
    displayName: "Build Stage"
    jobs:
      - job: BuildJob
        displayName: "Build and Test"
        steps:
          - task: PowerShell@2
            displayName: "Dump variables"
            inputs:
              targetType: "inline"
              script: |
                Write-Host "PowerShell task execution started"
                dir env:
              workingDirectory: "$(workingDirectory)"

          - task: AzureCLI@2
            displayName: 'ACR Build Image'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: ps
              scriptLocation: 'inlineScript'
              workingDirectory: $(workingDirectory)
              inlineScript: az acr build --registry mywin001vm --platform windows -image $(repositoryName):$(imagetag) --file Dockerfile

#todo pass the build arg , the Dockerfile should know how from where to get the image
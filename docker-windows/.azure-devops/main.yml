trigger:
  branches:
    include:
      - main
      - master

  paths:
    include:
      - "docker-windows/*"

pr:
  paths:
    include:
      - "docker-windows/*"

pool:
  vmImage: "windows-latest"

variables:
  pythonVersion: "3.11"
  workingDirectory: "$(System.DefaultWorkingDirectory)/docker-windows"
  imagetag: "$(BuildName)"
  containerRegistry: "mywin001vm.azurecr.io"  # Replace with your registry URL
  repositoryName: "python-demo"
  dockerRegistryServiceConnection: "mywin001vmAzureAcr"  # Replace with your service connection name
  MajorVersion: '1'
  MinorVersion: $[counter(variables['MajorVersion'], 1)]
  ReleaseBuildName: $(MajorVersion).$(MinorVersion).0
  PreReleaseBuildName: $(MajorVersion).$(MinorVersion).$(Build.BuildId)-beta
  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    BuildName: "${{ variables.ReleaseBuildName }}"
  ${{ else }}:
    BuildName: "${{ variables.PreReleaseBuildName }}"


name: "${{ variables.BuildName }}"


stages:
  - stage: Build
    displayName: "Build Stage"
    jobs:
      - job: BuildJob
        displayName: "Build and Test"
        steps:
          - task: PowerShell@2
            displayName: "Dump variables"
            inputs:
              targetType: "inline"
              script: |
                Write-Host "PowerShell task execution started"
                dir env:
              workingDirectory: "$(workingDirectory)"

          - task: UsePythonVersion@0
            displayName: "Set up Python $(pythonVersion)"
            inputs:
              versionSpec: "$(pythonVersion)"
              addToPath: true

          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: "Install Python dependencies"
            workingDirectory: "$(workingDirectory)"

          - script: |
              python src/demo.py
            displayName: "Run Python application"
            workingDirectory: "$(workingDirectory)"


  - stage: Docker
    displayName: "Docker Stage"
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: DockerBuild
        displayName: "Build Docker Image"
        steps:
          - task: Docker@2
            displayName: "Build and push Docker image"
            inputs:
              command: "buildAndPush"
              dockerfile: "$(workingDirectory)/Dockerfile"
              buildContext: "$(workingDirectory)"
              repository: "$(repositoryName)"
              tags: $(imagetag)
              containerRegistry: "$(dockerRegistryServiceConnection)"

          - task: Docker@2
            displayName: "List all Docker images"
            inputs:
              command: "images"
                            
          - script: |
              echo "Verifying specific image exists:"
              docker image ls $(containerRegistry)/$(repositoryName)
              echo "Docker version:"
              docker --version
            displayName: "Verify built image and Docker info"

          - script: |
              docker run --rm $(containerRegistry)/$(repositoryName):$(imagetag)
            displayName: "Run Docker container"

  - stage: Deploy
    displayName: "Deploy Stage"
    dependsOn: Docker
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployJob
        displayName: "Deploy Application"
        environment: "production"
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo "Deployment steps would go here"
                    echo "This runs only on main branch"
                  displayName: "Deploy application"
